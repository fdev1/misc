#!/bin/sh
#
# mkinitramfs script
# Copyright 2014 - Fernando Rodriguez
# Author: Fernando Rodriguez (frodriguez.developer@outlook.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

BULLET="\033[0;32m *\033[0m"
REDBUL="\033[0;31m !!\033[0m"

current_dir=$(pwd)
source_dir=/var/tmp/mkinitramfs
output_dir=$source_dir/ramfs
last_error=0
copy_firmware=0
#compress=1
overlay=""
pango_support=1
plymouth_support=1
uswsusp_support=0
swsusp_support=1
compress_method="xz"

# error checking routine
#
error_check()
{
	if [ $last_error == 1 ]; then
		echo 'An error has occurred!'
		exit
	fi
}

copy_links()
{
	#echo 'cp --preserve=links '$@
	cp -r --preserve=links $@
}

display_msg()
{
	echo -e "$BULLET $1"
}

# parse command line
#
while [ $# != 0 ];
do

	case $1 in

		--copy-firmware)
			copy_firmware=1
		;;
		--no-compress)
			#compress=0
			compress_method=""
		;;
		--compress=*)
			compress_method=${1#*=}
		;;
		--overlay=*)
			overlay=${1#*=}
		;;
		--disable-pango)
			pango_support=0
		;;
		--disable-plymouth)
			plymouth_support=0
		;;
		--disable-swsusp)
			swsusp_support=0
		;;
		--disable-uswsusp)
			uswsusp_support=0
		;;
		--help|-h)

			echo -e 'mkinitramfs v0.1'
			echo -e 'Copyright 2014 - Fernando Rodriguez (frodriguez.developer@outlook.com)'
			echo -e 'Usage: mkinitramfs [options]'
			echo
			echo -e 'Options:'
			echo -e "\t--no-compress\t\tDon't compress archive"
			echo -e "\t--compress=method\tSets the compression method (gzip,xz)"
			echo -e "\t--overlay=dir\t\tSets overlay directory"
			echo -e "\t--disable-plymouth\t\tDisables plymouth support"
			echo -e "\t--disable-pango\t\tDisables pango support for plymouth"
			echo -e "\t--disable-swsusp\t\tDisables swsusp support"
			echo -e "\t--disable-uswsusp\t\tDisables uswsusp kernel"
			echo
			exit
		;;
	esac
	shift
done

# if the tmp directory exists delete it
#
if [ -d $source_dir ]; then
	rm -r $source_dir
fi

# clean output directories
#
#if [ -d $output_dir ]; then
#	echo 'Cleaning up...'
#	rm -r $output_dir || last_error=1
#	error_check
#fi

# make directories
#
display_msg 'Creating directory tree...'
mkdir -p $output_dir/bin || last_error=1
mkdir -p $output_dir/sbin || last_error=1
mkdir -p $output_dir/etc || last_error=1
mkdir -p $output_dir/usr/bin || last_error=1
mkdir -p $output_dir/usr/sbin || last_error=1
mkdir -p $output_dir/usr/lib || last_error=1
mkdir -p $output_dir/lib || last_error=1
mkdir -p $output_dir/dev || last_error=1
mkdir -p $output_dir/dev/shm || last_error=1
mkdir -p $output_dir/proc || last_error=1
mkdir -p $output_dir/sys || last_error=1
mkdir -p $output_dir/run || last_error=1
mkdir -p $output_dir/var || last_error=1
mkdir -p $output_dir/var/log || last_error=1
mkdir -p $output_dir/tmp || last_error=1
mkdir -p $output_dir/newroot || last_error=1
mkdir -p $output_dir/newroot/run
mkdir -p $output_dir/newroot/dev
mkdir -p $output_dir/newroot/sys
mkdir -p $output_dir/newroot/proc

mknod -m 660 $output_dir/dev/console c 5 1 || last_error=1
mknod -m 660 $output_dir/dev/null c 1 3 || last_error=1
mknod -m 660 $output_dir/dev/zero c 1 5 || last_error=1
mknod -m 600 $output_dir/dev/tty0 c 4 0 || last_error=1
mknod -m 600 $output_dir/dev/tty1 c 4 1 || last_error=1
mknod -m 600 $output_dir/dev/ttyS0 c 4 64 || last_error=1
chmod 1777 $output_dir/dev/shm || last_error=1
error_check

# create lib64 symlinks
#
ln -s lib $output_dir/lib64 || last_error=1
ln -s lib $output_dir/usr/lib64 || last_error=1
error_check

#
# creating fstab
#
display_msg 'Creating fstab...'
echo "/dev/ram0     /           ext2     defaults    0 0" >  $output_dir/etc/fstab
echo "proc          /proc       proc     defaults    0 0" >> $output_dir/etc/fstab

#
# copy busybox files
#
display_msg 'Copying and installing busybox...'
cp /bin/busybox $output_dir/bin || last_error=1
ln -s busybox $output_dir/bin/cat || last_error=1
ln -s busybox $output_dir/bin/mount || last_error=1
ln -s busybox $output_dir/bin/sh || last_error=1
ln -s busybox $output_dir/bin/echo || last_error=1
ln -s busybox $output_dir/bin/sleep || last_error=1
ln -s busybox $output_dir/bin/mv || last_error=1
ln -s busybox $output_dir/bin/touch || last_error=1
ln -s /bin/busybox $output_dir/sbin/switch_root || last_error=1
error_check

# copy plymouth files
#
if [ $plymouth_support == 1 ]; then

	display_msg 'Copying plymouth files...'
	mkdir -p $output_dir/etc/plymouth || last_error=1
	mkdir -p $output_dir/usr/share/plymouth/themes || last_error=1
	mkdir -p $output_dir/usr/lib/plymouth/renderers || last_error=1
	cp /bin/plymouth $output_dir/bin/plymouth || last_error=1
	cp /sbin/plymouthd $output_dir/sbin/plymouthd || last_error=1
	cp -r /etc/plymouth/* $output_dir/etc/plymouth || last_error=1

	cp /usr/lib/libply.so.2 $output_dir/usr/lib
	cp /usr/lib/libply-splash-core.so.2 $output_dir/usr/lib
	cp /usr/lib/libply-splash-graphics.so.2 $output_dir/usr/lib
	cp /usr/lib/libpng16.so.16 $output_dir/usr/lib
	cp /usr/lib/libkms.so.1 $output_dir/usr/lib
	cp /usr/lib/libdrm.so.2 $output_dir/usr/lib
	cp /lib/libc.so.6 $output_dir/lib
	cp /lib/librt.so.1 $output_dir/lib
	cp /lib/libdl.so.2 $output_dir/lib
	cp /lib/libm.so.6 $output_dir/lib
	cp /lib/ld-linux-x86-64.so.2 $output_dir/lib
	cp /lib/libpthread.so.0 $output_dir/lib
	cp /lib/libkmod.so.2 $output_dir/lib
	cp /lib/libz.so.1 $output_dir/lib
	cp /lib/libacl.so.1 $output_dir/lib
	cp /lib/libuuid.so.1 $output_dir/lib
	cp /lib/libblkid.so.1 $output_dir/lib
	cp /lib/libattr.so.1 $output_dir/lib
	cp /usr/lib/plymouth/text.so $output_dir/usr/lib/plymouth
	cp /usr/lib/plymouth/label.so $output_dir/usr/lib/plymouth
	cp /usr/lib/plymouth/details.so $output_dir/usr/lib/plymouth
	cp /usr/lib/plymouth/renderers/frame-buffer.so $output_dir/usr/lib/plymouth/renderers
	#cp /usr/lib/plymouth/renderers/drm.so $output_dir/usr/lib/plymouth/renderers
	#cp /usr/lib/plymouth/renderers/x11.so $output_dir/usr/lib/plymouth/renderers

	cp /usr/lib/libdrm_radeon.so.1 $output_dir/usr/lib
	

	#cp /usr/share/plymouth/bizcom.png $output_dir/usr/share/plymouth
	cp /usr/share/plymouth/plymouthd.defaults $output_dir/usr/share/plymouth
	cp -r /usr/share/plymouth/themes/text $output_dir/usr/share/plymouth/themes
	cp -r /usr/share/plymouth/themes/details $output_dir/usr/share/plymouth/themes
	error_check

	# Copy plymouth theme
	#
	ply_theme=$(plymouth-set-default-theme)
	ply_theme_file=/usr/share/plymouth/themes/$ply_theme/$ply_theme.plymouth
	ply_plugins=$(plymouth --get-splash-plugin-path)
	[ -z "$ply_theme" ] && plymouth_theme=text
	display_msg 'Copying plymouth theme: '$ply_theme'...'
	cp -r /usr/share/plymouth/themes/$ply_theme $output_dir/usr/share/plymouth/themes
	cp -r $ply_plugins$(grep "^ModuleName=" $ply_theme_file | cut -d= -f2-).so $output_dir$ply_plugins
	ln -s $ply_theme/$ply_theme.plymouth $output_dir/usr/share/plymouth/themes/default.plymouth
	error_check

fi

# plymouth pango support
#
if [ $pango_support == 1 ]; then

	display_msg 'Copying pango support files...'
	mkdir -p $output_dir/etc/fonts
	mkdir -p $output_dir/etc/pango
	cp /etc/fonts/fonts.conf $output_dir/etc/fonts
	#cp -r /etc/fonts/* $output_dir/etc/fonts
	echo "/usr/lib/pango/1.8.0/modules/pango-basic-fc.so BasicScriptEngineFc PangoEngineShape PangoRenderFc common:" \
		> $output_dir/etc/pango/pango.modules

	cp /usr/lib/libpangocairo-1.0.so.0 $output_dir/usr/lib
	cp /usr/lib/libpango-1.0.so.0 $output_dir/usr/lib
	cp /usr/lib/libgobject-2.0.so.0 $output_dir/usr/lib
	cp /usr/lib/libcairo.so.2 $output_dir/usr/lib
	cp /usr/lib/libpangoft2-1.0.so.0 $output_dir/usr/lib
	cp /usr/lib/libglib-2.0.so.0 $output_dir/usr/lib
	cp /usr/lib/libfreetype.so.6 $output_dir/usr/lib
	cp /usr/lib/libfontconfig.so.1 $output_dir/usr/lib
	cp /usr/lib/libgmodule-2.0.so.0 $output_dir/usr/lib
	cp /usr/lib/libffi.so.6 $output_dir/usr/lib
	cp /usr/lib/libpixman-1.so.0 $output_dir/usr/lib
	cp /usr/lib/libEGL.so.1 $output_dir/usr/lib
	cp /usr/lib/libxcb-shm.so.0 $output_dir/usr/lib
	cp /usr/lib/libxcb-render.so.0 $output_dir/usr/lib
	cp /usr/lib/libxcb.so.1 $output_dir/usr/lib
	cp /usr/lib/libXrender.so.1 $output_dir/usr/lib
	cp /usr/lib/libX11.so.6 $output_dir/usr/lib
	cp /usr/lib/libXext.so.6 $output_dir/usr/lib
	cp /usr/lib/libGL.so.1 $output_dir/usr/lib
	cp /usr/lib/libharfbuzz.so.0 $output_dir/usr/lib
	cp /lib/libbz2.so.1 $output_dir/lib
	cp /usr/lib/libexpat.so.1 $output_dir/usr/lib
	cp /usr/lib/libX11-xcb.so.1 $output_dir/usr/lib
	cp /usr/lib/libxcb-dri2.so.0 $output_dir/usr/lib
	cp /usr/lib/libxcb-xfixes.so.0 $output_dir/usr/lib
	cp /usr/lib/libgbm.so.1 $output_dir/usr/lib
	cp /usr/lib/libXau.so.6 $output_dir/usr/lib
	cp /usr/lib/libXdmcp.so.6 $output_dir/usr/lib
	cp /usr/lib/libatiuki.so.1 $output_dir/usr/lib
	cp /usr/lib/libgraphite2.so.3 $output_dir/usr/lib
	cp /usr/lib/libglapi.so.0 $output_dir/usr/lib
	cp /usr/lib/libxcb-shape.so.0 $output_dir/usr/lib
	cp /usr/lib/libXdamage.so.1 $output_dir/usr/lib
	cp /usr/lib/libXfixes.so.3 $output_dir/usr/lib
	cp /usr/lib/libxcb-dri3.so.0 $output_dir/usr/lib
	cp /usr/lib/libxcb-glx.so.0 $output_dir/usr/lib
	cp /usr/lib/libxcb-present.so.0 $output_dir/usr/lib
	cp /usr/lib/libxcb-randr.so.0 $output_dir/usr/lib
	cp /usr/lib/libxcb-sync.so.1 $output_dir/usr/lib
	cp /usr/lib/libxshmfence.so.1 $output_dir/usr/lib
	cp /usr/lib/libXxf86vm.so.1 $output_dir/usr/lib

	mkdir -p $output_dir/usr/lib/pango/1.8.0/modules
	mkdir -p $output_dir/usr/share/fonts/dejavu

	cp /usr/lib/pango/1.8.0/modules/pango-basic-fc.so $output_dir/usr/lib/pango/1.8.0/modules
	cp /usr/share/fonts/dejavu/DejaVuSans.ttf $output_dir/usr/share/fonts/dejavu

        echo "/usr/lib/pango/1.8.0/modules/pango-basic-fc.so BasicScriptEngineFc PangoEngineShape PangoRenderFc common:" \
		> $output_dir/etc/pango/pango.modules

fi

#
# copy usb firmware
#
if [ $copy_firmware == 1 ]; then
	display_msg 'Copying USB firmware...'
	mkdir -p $output_dir/lib/firmware || last_error=1
	cp -r /lib/firmware/ar3k $output_dir/lib/firmware/ || last_error=1
	error_check

	#echo 'Copying modules...'
	mkdir -p $output_dir/lib/modules/$(uname -r)/kernel/drivers/char/drm/
	mkdir -p $output_dir/lib/modules/$(uname -r)/kernel/drivers/gpu/drm/
	cp /lib/modules/$(uname -r)/kernel/drivers/char/drm/fglrx.ko $output_dir/lib/modules/$(uname -r)/kernel/drivers/char/drm
	#cp /lib/modules/$(uname -r)/kernel/drivers/gpu/drm/drm_kms_helper.ko $output_dir/lib/modules/$(uname -r)/kernel/drivers/gpu/drm
	#cp -r /lib/modules/$(uname -r)/kernel/drivers/gpu/drm/ttm $output_dir/lib/modules/$(uname -r)/kernel/drivers/gpu/drm
	error_check
fi

# copy resume
#
if [ $uswsusp_support == 1 ]; then
	display_msg 'Copying uswsusp support files...'
	cp /usr/lib/suspend/resume $output_dir/sbin || last_error=1
	cp /etc/suspend.conf $output_dir/etc || last_error=1
	error_check
fi

# copy overlay
#
if [ "$overlay" != "" ]; then
	display_msg 'Copying overlay...'
	cp -r $overlay/* $output_dir || last_error=1
	error_check
fi

# ld.so.conf
#
display_msg 'Generating ld.so.cache...'
echo '/lib' >  $output_dir/etc/ld.so.conf
echo '/usr/lib' >> $output_dir/etc/ld.so.conf
ldconfig -r $output_dir

# copy init script
#
display_msg 'Generating init script...'

#########################################
# begin init script
#########################################
cat > $output_dir/init << "EOF"
#!/bin/sh
#
# initramfs init script
#

# error checking routine
#
error_check()
{
	if [ $last_error == 1 ]; then
		echo 'An error has occurred.'
		if [ $debug == 1 ]; then
			sh
		fi
		last_error=0
	fi
}

EOF

if [ $plymouth_support == 1 ]; then

	cat >> $output_dir/init << "EOF"
	plymouth_start()
	{
		if [ $show_splash == 1 ]; then
			plymouthd --mode=shutdown --kernel-command-line="splash"
		fi
	}

	plymouth_show()
	{
		if [ $show_splash == 1 ]; then
			plymouth show-splash
		fi
	}

	plymouth_set_message()
	{
		plymouth update --status=msg
		plymouth update --status="$1"
	}

	plymouth_set_quiet()
	{
		if [ $quiet == 1 ]; then
			plymouth update --status=set-quiet
		fi
	}

	plymouth_set_boot_mode()
	{
		plymouth change-mode --boot-up
		plymouth update --status=show-progress
	}

EOF
fi

cat >> $output_dir/init << "EOF"
# clean input/output
#
exec >/dev/console </dev/console 2>&1

# make sure that /sbin and /usr/sbin are in PATH
#
PATH="${PATH}:/sbin:/usr/sbin"

fake_root=""
quiet=0
debug=0
show_splash=0
last_error=0
init_opts=""
uswsusp=0
swsusp_resume=""

# mount virtual filesystems
#
mount -t proc -o noexec,nosuid,nodev proc /proc >/dev/null 2>&1
mount -o remount,rw / >/dev/null 2>&1
mount -t tmpfs -o rw,nosuid,nodev,relatime,mode=755 none /run 2>&1
mount -t tmpfs -o rw,nosuid,nodev,relatime,mode=755 none /dev/shm 2>&1

# mount devfs
#
mount -t devtmpfs -o "exec,nosuid,mode=0755,size=10M" udev /dev || last_error=1
mkdir -m 0755 /dev/pts
mount -t devpts -o gid=5,mode=0620 devpts /dev/pts || last_error=1
mkdir -p -m 1777 /dev/shm
mount -t tmpfs -o mode=1777,nosuid,nodev,strictatime tmpfs /dev/shm || last_error=1
error_check

# mount sysfs
#
mount -t sysfs sysfs /sys -o noexec,nosuid,nodev > /dev/null 2>&1 || last_error=1
error_check

#/bin/sh

# parse command line
#
for x in $(cat /proc/cmdline); do
	case "${x}" in
        	root=*)
			fake_root=${x#*=}
        	;;
		init_opts=*)
			init_opts=${x#*=}
		;;
		debug)
			debug=1
		;;
		quiet)
			quiet=1
		;;
		splash)
			show_splash=1
		;;
		swsusp_resume=*)
			swsusp_resume=${x#*=}
			#swsusp_resume=$(readlink -f ${swsusp_resume} | awk -F '/' '{ print $3 }')
			#swsusp_resume=$(cat /sys/class/block/${swsusp_resume}/dev) 
		;;
		uswsusp)
			uswsusp=1
		;;
	esac
done

EOF

if [ $uswsusp_support == 1 ]; then

	cat >> $output_dir/init << "EOF"
	# invoke uswsusp resume
	#
	if [ $uswsusp == 1 ]; then
		/sbin/resume &
		resume_pid=$!
		sleep 0.5
		if [ "$(kill -0 $resume_pid 2>&1)" == "" ]; then
			echo -en "\x1b[2K\rResuming...\n"
			while [ "$(kill -0 $resume_pid 2>&1)" == "" ];
			do
				sleep 2
			done
		fi
	fi

EOF
fi

if [ $plymouth_support == 1 ]; then

	cat >> $output_dir/init << "EOF"
	# start plymouthd and show splash screen
	#
	plymouth_start
	plymouth_show
	plymouth_set_quiet
EOF
fi

#/sbin/resume

if [ $swsusp_support == 1 ] && [ $plymouth_support == 1 ]; then

	#plymouth_support=0
	cat >> $output_dir/init << "EOF"

	# Resume using swsusp
	#
	if [ "$swsusp_resume" != "" ]; then
		plymouth_set_message "Thawing System..."
		sleep 0.25
		echo "$swsusp_resume" > /sys/power/resume
		plymouth_set_boot_mode
		plymouth_set_quiet
		plymouth_set_message "Booting System..."
	else
		plymouth_set_boot_mode
		plymouth_set_quiet
		plymouth_set_message "Booting System..."
	fi

EOF
elif [ $swsusp_support == 1 ]; then

	cat >> $output_dir/init << "EOF"
	# Resume using swsusp
	#
	if [ "$swsusp_resume" != "" ]; then
		echo "$swsusp_resume" > /sys/power/resume
	fi

EOF
elif [ $plymouth_support == 1 ]; then
	cat >> $output_dir/init << "EOF"
	plymouth_set_boot_mode
	plymouth_set_message "Booting System..."

EOF
fi

if [ "$overlay" != "" ]; then
	cat >> $output_dir/init << "EOF"
	# if there's a linuxrc script execute it now
	#
	if [ -x /linuxrc ]; then
		exec sh /linuxrc
	fi

EOF
fi

cat >> $output_dir/init << "EOF"
# mount the new root filesystem
#
mount -o ro $fake_root /newroot

# move virtual filesystems to new root
#
mount --move /run /newroot/run
mount --move /dev /newroot/dev
mount --move /sys /newroot/sys
mount --move /proc /newroot/proc

EOF

if [ $plymouth_support == 1 ]; then
	cat >> $output_dir/init << "EOF"
	# inform plymouth of new root
	#
	if [ $show_splash == 1 ]; then
		plymouth --newroot=/newroot
	fi

EOF
fi

cat >> $output_dir/init << "EOF"

# switch to new root
#
exec /sbin/switch_root -c /dev/console /newroot /usr/lib/systemd/systemd "$init_opts"

#
# If we get here, something bad has happened
#

EOF

if [ $plymouth_support == 1 ]; then

	cat >> $output_dir/init << "EOF"
	# hide splash screen
	#
	if [ $show_splash == 1 ]; then
		plymouth --hide-splash
	fi

EOF
fi

cat >> $output_dir/init << "EOF"
# if the debug option was specified then attempt to
# start a shell, otherwise just display an error message
#
if [ $debug == 1 ]; then
	echo 'Init process did not start correctly'
	echo 'Attempting to start a shell...'
	exec /bin/sh
else
	echo 'Init process did not start correctly'
fi

# display an error notifying use that he can press
# CTRL-ALT-DEL to reboot the system and hang the system
#
echo 'Press CTRL-ALT-DEL to reboot.'

while [ 1 ];
do
	read line
done

EOF
#########################################
# end init script
#########################################
chmod +x $output_dir/init || last_error=1
error_check

# create cpio archive
#
display_msg 'Creating cpio archive...'
cd $output_dir
find . -print0 | cpio --null -o --format=newc > $source_dir/initramfs.cpio || last_error=1
error_check

# compress the archive
#
#if [ $compress == 1 ]; then
#	echo 'Compresing archive...'
#	#cat $source_dir/initramfs.cpio | gzip -9 > $source_dir/initramfs.img || last_error=1
#	cat $source_dir/initramfs.cpio | xz -e --check=none -z -f -9 > $source_dir/initramfs.img || last_error=1
#	error_check
#fi

if [ "$compress_method" != "" ]; then

	display_msg 'Compressing archive ('$compress_method')...'

	case $compress_method in
		gzip)
			cat $source_dir/initramfs.cpio | gzip -9 > $source_dir/initramfs.img || last_error=1
		;;
		xz)
			cat $source_dir/initramfs.cpio | xz -e --check=none -z -f -9 > $source_dir/initramfs.img || last_error=1
		;;
		*)
			echo 'error: Compression method not supported!'
			exit
		;;
	esac
fi


# copy image to output dir and delete temp dir
#
if [ "$compress_method" != "" ]; then
	cp $source_dir/initramfs.img $current_dir || last_error=1
else
	cp $source_dir/initramfs.cpio $current_dir/initramfs.img || last_error=1
fi

# remove tmp files
#
display_msg 'Cleaning up...'
#rm -r $source_dir || last_error=1
#error_check

